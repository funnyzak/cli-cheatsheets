##############################################################################
# Bun.js 速查表 (Bun.js Cheatsheet)
# 快速、一体化的 JavaScript 工具集 (A fast, all-in-one JavaScript toolkit)
# https://github.com/funnyzak/cli-cheatsheets
##############################################################################

# Bun 是一个现代的 JavaScript 运行时、打包器、转译器和包管理器，全部功能集于一身。
# 本速查表旨在帮助您快速掌握其核心命令。

##############################################################################
# 项目初始化 (Project Initialization)
##############################################################################

bun init                                      # 在当前目录初始化一个新项目 (生成 package.json 等)
bun create <template> [dir]                   # 使用模板创建一个新项目
# 常用模板: react, next, elysia, svelte, vue, astro

##############################################################################
# 依赖管理 (Dependency Management) - 极速
##############################################################################

bun install                                   # 安装 package.json 中的所有依赖 (等同于 bun i)
bun add <pkg>                                 # 添加一个生产依赖
bun add -d <pkg>                              # 添加一个开发依赖 (-D, --dev)
bun add -o <pkg>                              # 添加一个可选依赖 (-O, --optional)
bun add -E <pkg>                              # 添加一个精确版本的依赖 (-E, --exact)
bun add <alias>@npm:<pkg>                     # 为包设置别名
bun remove <pkg>                              # 移除一个依赖 (等同于 bun rm)
bun update [pkg...]                           # 更新指定的包或所有包
bun pm ls                                     # 列出已安装的包

# 提示:
#   - Bun 的包管理速度远超 npm/yarn/pnpm。
#   - 使用 `bun.lockb` 二进制文件锁定依赖，读写更快。

##############################################################################
# 运行脚本与文件 (Running Scripts & Files)
##############################################################################

bun run <script_name>                         # 运行在 package.json 中定义的脚本
bun <file>                                    # 直接运行一个 JS/TS/JSX/TSX 文件，无需额外配置
bun --watch <file>                            # 监视文件变化并自动重新运行
bunx <pkg>                                    # 从 npm registry 执行一个包 (类似 npx)
bunx --bun <script.sh>                        # 使用 Bun 的内置 Shell 运行脚本

# 提示:
#   - `bun <file>` 是 `bun run <file>` 的简写。
#   - Bun 内置支持 TypeScript 和 JSX，无需预编译。

##############################################################################
# 代码打包 (Bundling - bun build)
##############################################################################

bun build <entrypoints...> --outdir <dir>     # 打包一个或多个入口文件到指定目录
bun build ./index.ts --outdir ./dist          # 示例: 打包 index.ts 到 dist 目录
bun build ./index.ts --outfile ./bundle.js    # 打包并指定输出文件名

# 常用选项:
#   --target=browser|node|bun                 # 指定打包目标环境
#   --minify                                  # 压缩输出代码
#   --sourcemap                               # 生成 Source Map
#   --watch                                   # 监视文件变化并自动重新打包
#   --external <pkg>                          # 将某个包标记为外部依赖，不打包进去

##############################################################################
# 测试 (Testing - bun test)
##############################################################################

bun test                                      # 运行项目中的所有测试文件 (*.test.ts, *.spec.ts 等)
bun test [query]                              # 运行匹配查询字符串的测试文件
bun test --watch                              # 监视文件变化并自动重新运行测试
bun test --coverage                           # 生成代码覆盖率报告
bun test --preload <file>                     # 在运行测试前预加载一个模块 (例如: setup 文件)

# 提示:
#   - Bun 的测试运行器与 Jest API 兼容，迁移成本低。

##############################################################################
# 其他实用命令 (Other Utility Commands)
##############################################################################

bun repl                                      # 启动一个交互式 REPL (Read-Eval-Print Loop)
bun upgrade                                   # 升级 Bun 到最新版本
bun --version                                 # 显示 Bun 的版本 (等同于 bun -v)
bun --help                                    # 显示帮助信息

##############################################################################
# 实用技巧 (Tips & Tricks)
##############################################################################

# 配置文件 (bunfig.toml):
#   在项目根目录创建 `bunfig.toml` 文件可以自定义 Bun 的行为，
#   例如设置 registry, 定义 loader, 配置预加载模块等。

# 速度优势:
#   - `bun install`: 利用全局缓存和优化的依赖解析，速度极快。
#   - `bun run`: 启动脚本的开销远小于 npm/yarn。

# Bun Shell:
#   Bun 实现了一个跨平台的 Shell，可以让你用 JavaScript/TypeScript 编写 Shell 脚本，
#   并使用熟悉的命令如 `cd`, `ls`, `rm` 等。
#   使用 `import { $ } from "bun"; await $`ls -la`;`

##############################################################################
# 示例 (Examples)
##############################################################################

# 1. 创建并运行一个新的 React 项目:
#   bun create react ./my-react-app
#   cd ./my-react-app
#   bun install
#   bun run dev

# 2. 打包一个 TypeScript 库用于 Node.js 环境:
#   # 假设入口文件是 ./src/index.ts
#   bun build ./src/index.ts --outdir ./dist --target=node --minify

# 3. 快速执行一个远程脚本:
#   bunx cowsay "Hello from Bun!"

##############################################################################
# 鸣谢 & 更多资源 (Credit & Further Resources)
##############################################################################

# Bun 官方文档 (Official Bun Documentation): https://bun.sh/docs
# Bun GitHub 仓库: https://github.com/oven-sh/bun

# vim: set ts=4 sw=4 tw=0 et ft=bash :