##############################################################################
# cut 速查表 (cut Cheatsheet)
# https://github.com/funnyzak/cli-cheatsheets
##############################################################################

# 图例 (Legend):
#   - FILE:       文件名 (File name)
#   - LIST:       字段/字符列表 (Field/character list)
#   - DELIMITER:  分隔符 (Delimiter)
#   - START:      开始位置 (Start position)
#   - END:        结束位置 (End position)

##############################################################################
# 基本语法 (Basic Syntax)
##############################################################################

cut OPTION [FILE]                                     # 基本语法格式
cut OPTION [FILE1] [FILE2] ...                       # 处理多个文件

##############################################################################
# 字节选择 (Byte Selection)
##############################################################################

cut -b LIST [FILE]                                    # 按字节选择
cut -b 1 [FILE]                                       # 选择第1个字节
cut -b 1,3,5 [FILE]                                   # 选择第1、3、5个字节
cut -b 1-5 [FILE]                                     # 选择第1-5个字节
cut -b -5 [FILE]                                      # 选择第1-5个字节
cut -b 5- [FILE]                                      # 选择第5个字节到行尾
cut -b 1-3,7-10 [FILE]                                # 选择多个范围
cut -b 1-3,7-10,15 [FILE]                             # 混合范围和单个字节

##############################################################################
# 字符选择 (Character Selection)
##############################################################################

cut -c LIST [FILE]                                    # 按字符选择 (处理多字节字符)
cut -c 1 [FILE]                                       # 选择第1个字符
cut -c 1,3,5 [FILE]                                   # 选择第1、3、5个字符
cut -c 1-5 [FILE]                                     # 选择第1-5个字符
cut -c -5 [FILE]                                      # 选择第1-5个字符
cut -c 5- [FILE]                                      # 选择第5个字符到行尾
cut -c 1-3,7-10 [FILE]                                # 选择多个范围
cut -c 1-3,7-10,15 [FILE]                             # 混合范围和单个字符

##############################################################################
# 字段选择 (Field Selection)
##############################################################################

cut -f LIST [FILE]                                    # 按字段选择 (默认使用制表符分隔)
cut -f 1 [FILE]                                       # 选择第1个字段
cut -f 1,3,5 [FILE]                                   # 选择第1、3、5个字段
cut -f 1-3 [FILE]                                     # 选择第1-3个字段
cut -f -3 [FILE]                                      # 选择第1-3个字段
cut -f 3- [FILE]                                      # 选择第3个字段到行尾
cut -f 1-3,5-7 [FILE]                                 # 选择多个范围
cut -f 1-3,5-7,9 [FILE]                               # 混合范围和单个字段
cut -f 1,2,3 [FILE]                                   # 选择多个字段

##############################################################################
# 指定分隔符 (Specifying Delimiter)
##############################################################################

cut -d 'DELIMITER' -f LIST [FILE]                     # 指定字段分隔符
cut -d ':' -f 1 /etc/passwd                           # 使用冒号分隔
cut -d ',' -f 1,3 FILE                                # 使用逗号分隔
cut -d ' ' -f 1 FILE                                  # 使用空格分隔
cut -d '\t' -f 1 FILE                                 # 使用制表符分隔
cut -d ';' -f 1 FILE                                  # 使用分号分隔

##############################################################################
# 输出分隔符 (Output Delimiter)
##############################################################################

cut --output-delimiter='DELIMITER' OPTION [FILE]       # 指定输出分隔符
cut -d ':' -f 1,3 --output-delimiter=' ' /etc/passwd   # 输出字段用空格分隔
cut -d ',' -f 1,3 --output-delimiter='|' FILE         # 输出字段用管道分隔

##############################################################################
# 补充选择 (Complement Selection)
##############################################################################

cut --complement OPTION [FILE]                        # 选择未指定的部分
cut --complement -b 1-5 FILE                           # 选择第6个字节到行尾
cut --complement -f 1,3 FILE                           # 选择除第1、3字段外的所有字段
cut --complement -c 1-3 FILE                           # 选择第4个字符到行尾

##############################################################################
# 仅显示分隔符 (Only Delimited Lines)
##############################################################################

cut -s -f LIST [FILE]                                 # 只显示包含分隔符的行
cut -s -d ':' -f 1 /etc/passwd                        # 只显示包含冒号的行
cut -s -d ',' -f 1 FILE                               # 只显示包含逗号的行

##############################################################################
# 实用示例 (Practical Examples)
##############################################################################

# 处理 /etc/passwd 文件
cut -d ':' -f 1 /etc/passwd                           # 提取用户名
cut -d ':' -f 1,6 /etc/passwd                         # 提取用户名和主目录
cut -d ':' -f 7 /etc/passwd                           # 提取shell路径

# 处理CSV文件
cut -d ',' -f 1,3 FILE.csv                            # 提取第1、3列
cut -d ',' -f 2- FILE.csv                             # 提取第2列到最后一列
cut -d ',' -f -2 FILE.csv                             # 提取前2列

# 处理日志文件
cut -d ' ' -f 1 access.log                            # 提取IP地址
cut -d ' ' -f 7 access.log                            # 提取请求的URL
cut -d ' ' -f 9 access.log                            # 提取HTTP状态码

# 处理文本文件
cut -c 1-10 FILE                                      # 提取每行的前10个字符
cut -c 11-20 FILE                                     # 提取每行的第11-20个字符
cut -c 21- FILE                                       # 提取每行的第21个字符到行尾

# 固定宽度文件处理
cut -c 1-8,10-15,20-25 FILE                          # 提取多个固定位置的字段

##############################################################################
# 高级用法 (Advanced Usage)
##############################################################################

# 与其他命令组合使用
ps aux | cut -d ' ' -f 2                              # 提取进程ID
df -h | cut -d ' ' -f 1,5                            # 提取文件系统和使用率
ls -l | cut -c 1-10                                   # 提取文件权限

# 处理多字节字符 (中文等)
export LC_ALL=C                                       # 确保正确处理多字节字符
cut -c 1-5 FILE                                       # 按字符而非字节选择

# 处理空格分隔的字段
cut -d ' ' -f 1 FILE                                  # 注意：连续空格会产生空字段
awk '{print $1}' FILE                                  # 替代方案：使用awk

##############################################################################
# 性能和限制 (Performance and Limitations)
##############################################################################

# cut 的优势和限制
# + 优势：简单、快速、专门用于列提取
# + 限制：只能处理简单的分隔符，不支持正则表达式

# 当cut不够用时，考虑使用其他工具
awk '{print $1}' FILE                                  # 更灵活的字段处理
sed 's/\([^ ]*\) .*/\1/' FILE                         # 使用正则表达式
python -c "import sys; print(sys.stdin.read().split()[0])"  # Python处理

##############################################################################
# 错误处理 (Error Handling)
##############################################################################

cut --help                                            # 显示帮助信息
cut --version                                         # 显示版本信息

# 常见错误和解决方案
cut -d ':' -f 1 FILE                                  # 如果文件中没有冒号，会显示整行
cut -s -d ':' -f 1 FILE                               # 使用 -s 只显示包含分隔符的行
cut -f 100 FILE                                       # 如果字段不存在，不会显示错误

##############################################################################
# 最佳实践 (Best Practices)
##############################################################################

# 使用 -s 选项过滤不包含分隔符的行
cut -s -d ':' -f 1 FILE

# 对于复杂的字段分隔，考虑使用awk
awk -F'[:, ]+' '{print $1}' FILE                      # 支持多种分隔符

# 处理固定宽度文件时，使用字符选择
cut -c 1-10,20-30 FILE

# 在脚本中使用时，先检查文件是否存在
if [ -f FILE ]; then
    cut -d ':' -f 1 FILE
else
    echo "File not found"
fi

##############################################################################
# 与其他工具的比较 (Comparison with Other Tools)
##############################################################################

# cut vs awk
cut -d ':' -f 1 FILE                                 # 简单字段提取
awk -F: '{print $1}' FILE                             # 更灵活，支持复杂逻辑

# cut vs sed
cut -c 1-10 FILE                                     # 简单字符提取
sed 's/\(.\{10\}\).*/\1/' FILE                       # 使用正则表达式

# cut vs column
cut -d ':' -f 1 FILE                                 # 简单列提取
column -t -s ':' FILE                                 # 格式化输出列对齐

##############################################################################
# 实际应用场景 (Real-world Scenarios)
##############################################################################

# 系统管理
cut -d ':' -f 1 /etc/passwd | sort                    # 列出所有用户
cut -d ':' -f 7 /etc/passwd | sort | uniq             # 列出所有shell
cut -d ' ' -f 1 /proc/mounts                         # 列出所有挂载点

# 日志分析
cut -d ' ' -f 1 access.log | sort | uniq -c           # 统计IP访问次数
cut -d ' ' -f 7 access.log | grep -E '\.(php|html)'   # 提取特定文件类型
cut -d ' ' -f 9 access.log | grep -E '^[45]'          # 提取错误状态码

# 数据处理
cut -d ',' -f 1,3 data.csv > output.csv              # 提取特定列
cut -c 1-20 data.txt | tr '[:upper:]' '[:lower:]'     # 转换大小写
cut -d ' ' -f 2- data.txt | paste -sd+ | bc          # 计算数值列的总和

##############################################################################
# 脚本示例 (Script Examples)
##############################################################################

# 提取文件扩展名
#!/bin/bash
filename="document.txt"
extension=$(echo "$filename" | cut -d '.' -f 2-)
echo "Extension: $extension"

# 提取进程的内存使用
#!/bin/bash
ps aux | grep "$1" | cut -d ' ' -f 4 | sort -nr | head -5

# 批量重命名文件
#!/bin/bash
for file in *.txt; do
    newname=$(echo "$file" | cut -d '.' -f 1).new.txt
    mv "$file" "$newname"
done